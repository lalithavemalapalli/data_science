### Built-In Data Structures, Functions, and Files

### **Assignment 1: Lists and Tuples in Depth**
**Objective**: Reinforce your understanding of how lists and tuples work, including mutability, performance, and slicing.

**Task**:

1. Write a function `process_list_tuple` that:
   - Takes a list of tuples, each containing a student name and their score, e.g., `[('John', 85), ('Jane', 92), ('Dave', 78)]`.
       ans: def process_list_tuple(student_tuples):
                student_dict = {}
                for name, score in student_tuples:
                    student_dict[name] = score
               return student_dict
            students = [('Anju', 90), ('Joe', 85), ('Swathi', 88)]
            result = process_list_tuple(students)
            print(result)
        In the above program we create the function called process_list_tuple() and passed a parameter in the function as student_tuples,
          at last we call the function it returns the list which contains both the student name and their score .
    - Returns two outputs:
     - A sorted version of the list based on scores.
        ans: To sort list based on the scores we need to use the sorted() method .
              sorted_students = sorted(student_tuples, key=lambda x: x[1])
              print("sorted list based on the scores are:",sorted_students)
     - A list of only the names of students who scored above 80.
        ans: to list the only names of students who scored above 80 is:
              above_80_students-[name for name,score in students if score > 80]
              print("students who scored above 80 are:",above_80_students)

2.Why are tuples used in this case instead of lists? What advantage do tuples offer?
   ans: in this case we use tuples because rather than list because in python the tuples are mutable after declaring also we 
       can able to change the elements we can able to add , delete and update the tuples .
         in this cse we didn't used the list because the lists are immutable in python they cant be able to add or delete or update the elements to the 
        list ince we declared it .


--------
 ### **Assignment 2: Exploring Dictionaries and Sets**
**Objective**: Understand dictionary operations and the importance of sets in certain algorithms.

**Task**:
1. Create a function `count_letter_frequency` that:
   - Takes a string input and returns a dictionary with letters as keys and their frequency as values. For example, `"hello"` returns `{'h': 1, 'e': 1, 'l': 2, 'o': 1}`.
           def count_letter_frequency(input_string):
                letter_frequency = {}
                for letter in input_string:
                    if letter.isalpha():
                        letter = letter.lower()  
                        if letter in letter_frequency:
                           letter_frequency[letter] += 1
                       else:
                           letter_frequency[letter] = 1    
                return letter_frequency
            input_str = "hello"
            result = count_letter_frequency(input_str)
            print(result)  
                output:{'h': 1, 'e': 1, 'l': 2, 'o': 1}
    in the above program the first in if condition letter.isalpha() checks whether the given input is alphabet or not ,
    and then the letter.lower() method converts the each alphabets into the lowercase , and then the second if condition update the cout of the frequency .

2. Implement another function `unique_letters` that returns a set of letters that occur only once in the string.
    ans: def unique_strings(input_string):
            letter_frequency=count_letter_frequency(input_string)
            unique = {letter for letter, count in letter_frequency.items() if count == 1}
            return unique
        input_str = "hello"
        unique_result = unique_strings(input_str)
        print(unique_result)
    to print a set of letters that occur only once in the string firstly we need to count the number of occurences of each charecter in the string,
    to count that we use coount_letter_frequency.items() function in python ,after that we print the unique letters in the string that occur
    only once in the string .

3. **Bonus**: Whatâ€™s the time complexity of inserting and looking up elements in a dictionary compared to a list? Why?
     ans: the time complexity of inserting and looking up elements in dictionary comared to a list is typical because dictionaries are the examples of the hash functions ,
     in this dictionaries because of this hash function the key are not able to access directly soo compared to list the indexing and looking up in dictionaries will be difficult.

------
### **Assignment 3: Custom Functions**
**Objective**: Create functions with default and keyword arguments.

**Task**:
1.Write a function `student_grades` that:
   - Accepts a dictionary of student names and scores.
   - Returns the grade of a given student, or "Student not found" if the student does not exist.
   - Includes an optional argument `passing_grade` with a default value of 60, and a flag to indicate whether you should return a "Passed" or "Failed" message instead of the score.
     ans: def student_grades(students, student_name, passing_grade=60, return_status=False):
                if student_name not in students:
                return "Student not found"
                score = students[student_name]
                if return_status:
                    return "Passed" if score >= passing_grade else "Failed"
                return score
            students_dict = {
                'John': 85,
                'Jane': 92,
                'Dave': 55
            }   
            print(student_grades(students_dict, 'John'))  
            print(student_grades(students_dict, 'Dave', return_status=True)) 
            print(student_grades(students_dict, 'Alice'))

2.**Question**: What are the benefits of using default and keyword arguments in Python functions? When should you use them?
   ans: the benifits of using the default arguments are it helps the users for the repetative calls of the function and we don't have to provide the 
   values or parameters when the function is called it will take the default values and run that program.
   the benifits of using the keyword arguments are it will helps the users to pass multiple parameters easily .
   the keyword arguments are particularly used when the user need to pass multiple parameters .

----
### **Assignment 4: File I/O**
**Objective**: Learn to read and write to files in Python.

**Task**:
1. Write a Python program that:
   - Reads a text file containing lines of comma-separated values (e.g., `students.txt`).
   - For each line, split the data into fields and store it in a dictionary where the first column is the key and the remaining columns are the values (e.g., student name and grades).
   - Save the output as a new JSON file.
      ans: import json

def process_csv_to_dict(file_path):
    student_data = {}
    with open(file_path, 'r') as file:
        for line in file:
            fields = line.strip().split(',')
            student_name = fields[0]
            grades = fields[1:]
            student_data[student_name] = grades
    return student_data
def save_to_json(data, output_file):
    with open(output_file, 'w') as json_file:
        json.dump(data, json_file, indent=4)
input_file = 'students.txt'  # The input CSV file
output_file = 'students.json'  # The output JSON file
students_dict = process_csv_to_dict(input_file)
save_to_json(students_dict, output_file)
print(f"Data successfully saved to {output_file}")

2. **Bonus**: Explain the difference between binary and text modes when handling files in Python.
   ans: there is a differenec between the binary mode and the text mode .
   there are two modes in the in the file saving those are binary mode and text mode .
   binary mode: in binary mode the file content is treated as the raw binary data that is in the form of bytes .
                 and in binary mode the newline charecters are not automatically converted .
    text mode: in text mode the file content is treated as the normal text
                and in this text mode the newline charecters are automatically converted .

--------
### **Assignment 5: Lambda Functions and List Comprehensions**
**Objective**: Practice concise and functional programming techniques.

**Task**:
1. Write a lambda function that:
   - Takes a list of numbers and returns only the even numbers.
   - Use the `filter()` function to achieve this.
      ans: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
           even_numbers=list(filter(lamda x: x % 2 == 0 , numbers))
           print("the even numbers in the list are:",even_numbers)
        in python we create the lambda function to filter out the even numbers from the list using the filter() function .

2. Use a list comprehension to generate a list of squares for all odd numbers from 1 to 20.
    ans: square_of_odd_num=(x**2 for x in range(1,21) if x%2!=0)
         print("the sqaures of all the odd numbers between 1 to 20 are:",square_of_odd_num)

**Bonus**:
3. What are the advantages and limitations of lambda functions compared to traditional functions in Python?
   ans: the advantages and limitations of the lamda functions compare to the traditional functions are:
         * the lamda function can be used inside the line also and which does not need any parameters to be passed but the traditional functions 
         also able to use inside the line but the parameters should be passed to the traditional functions in python 
         * the lamda function is used for the only single values we cannot able to use the lamda functions for the multiple values , but the traditional 
         functions can be used for the multiple values in python.

-----
### **Assignment 6: Error Handling**
**Objective**: Learn how to handle exceptions in Python.

**Task**:
1. Write a function `read_file_safely` that:
   - Attempts to read from a file and catches potential errors (like `FileNotFoundError`).
   - If an error occurs, print a user-friendly message.
    ans: def read_file_safely(file_path):
           try:
              with open(file_path, 'r') as file:
              content = file.read()
              return content
          except FileNotFoundError:
              print(f"Error: The file '{file_path}' was not found.")
          except IOError:
              print(f"Error: An unexpected error occurred while reading the file '{file_path}'.")
      file_content = read_file_safely('example.txt')
          output: Error: The file 'example.txt' was not found.

2. **Bonus**: What are the types of errors you might encounter when working with files? Why is it important to handle exceptions?
    ans : the different types of errors might encounter when working with files are:
           *ValueError
           *KeyError
           *TypeError
           *IOError
           *FileNotFoundError
           *ZeroDivisionError
         it is very important to handle exceptions because it helps in running the codes without crashing means , where it gets the error 
         it gives the user-friendly error message and continue running the next parts of the code . 
